import {
  addDays,
  addHours,
  addMinutes,
  addMonths,
  addSeconds,
  addWeeks,
  addYears,
  enUS,
  endOfDay,
  endOfMonth,
  endOfWeek,
  endOfYear,
  format,
  getDate,
  getDaysInMonth,
  getHours,
  getMilliseconds,
  getMinutes,
  getMonth,
  getSeconds,
  getWeek,
  getYear,
  isAfter,
  isBefore,
  isEqual,
  isSameDay,
  isSameHour,
  isSameMonth,
  isSameYear,
  isValid,
  isWithinInterval,
  longFormatters,
  parse,
  setDate,
  setHours,
  setMilliseconds,
  setMinutes,
  setMonth,
  setSeconds,
  setYear,
  startOfDay,
  startOfMonth,
  startOfWeek,
  startOfYear
} from "./chunk-LLELJVPT.js";
import {
  _extends
} from "./chunk-EQCCHGRT.js";
import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/@mui/x-date-pickers/esm/AdapterDateFnsBase/AdapterDateFnsBase.js
var formatTokenMap = {
  // Year
  y: {
    sectionType: "year",
    contentType: "digit",
    maxLength: 4
  },
  yy: "year",
  yyy: {
    sectionType: "year",
    contentType: "digit",
    maxLength: 4
  },
  yyyy: "year",
  // Month
  M: {
    sectionType: "month",
    contentType: "digit",
    maxLength: 2
  },
  MM: "month",
  MMMM: {
    sectionType: "month",
    contentType: "letter"
  },
  MMM: {
    sectionType: "month",
    contentType: "letter"
  },
  L: {
    sectionType: "month",
    contentType: "digit",
    maxLength: 2
  },
  LL: "month",
  LLL: {
    sectionType: "month",
    contentType: "letter"
  },
  LLLL: {
    sectionType: "month",
    contentType: "letter"
  },
  // Day of the month
  d: {
    sectionType: "day",
    contentType: "digit",
    maxLength: 2
  },
  dd: "day",
  do: {
    sectionType: "day",
    contentType: "digit-with-letter"
  },
  // Day of the week
  E: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EEE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EEEE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  EEEEE: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  i: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  ii: "weekDay",
  iii: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  iiii: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  // eslint-disable-next-line id-denylist
  e: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  ee: "weekDay",
  eee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  eeee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  eeeee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  eeeeee: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  c: {
    sectionType: "weekDay",
    contentType: "digit",
    maxLength: 1
  },
  cc: "weekDay",
  ccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  cccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  ccccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  cccccc: {
    sectionType: "weekDay",
    contentType: "letter"
  },
  // Meridiem
  a: "meridiem",
  aa: "meridiem",
  aaa: "meridiem",
  // Hours
  H: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  HH: "hours",
  h: {
    sectionType: "hours",
    contentType: "digit",
    maxLength: 2
  },
  hh: "hours",
  // Minutes
  m: {
    sectionType: "minutes",
    contentType: "digit",
    maxLength: 2
  },
  mm: "minutes",
  // Seconds
  s: {
    sectionType: "seconds",
    contentType: "digit",
    maxLength: 2
  },
  ss: "seconds"
};
var defaultFormats = {
  year: "yyyy",
  month: "LLLL",
  monthShort: "MMM",
  dayOfMonth: "d",
  dayOfMonthFull: "do",
  weekday: "EEEE",
  weekdayShort: "EEEEEE",
  hours24h: "HH",
  hours12h: "hh",
  meridiem: "aa",
  minutes: "mm",
  seconds: "ss",
  fullDate: "PP",
  keyboardDate: "P",
  shortDate: "MMM d",
  normalDate: "d MMMM",
  normalDateWithWeekday: "EEE, MMM d",
  fullTime12h: "hh:mm aa",
  fullTime24h: "HH:mm",
  keyboardDateTime12h: "P hh:mm aa",
  keyboardDateTime24h: "P HH:mm"
};
var AdapterDateFnsBase = class {
  constructor(props) {
    __publicField(this, "isMUIAdapter", true);
    __publicField(this, "isTimezoneCompatible", false);
    __publicField(this, "formatTokenMap", /* @__PURE__ */ (() => formatTokenMap)());
    __publicField(this, "escapedCharacters", {
      start: "'",
      end: "'"
    });
    __publicField(this, "date", (value) => {
      if (typeof value === "undefined") {
        return /* @__PURE__ */ new Date();
      }
      if (value === null) {
        return null;
      }
      return new Date(value);
    });
    __publicField(this, "getInvalidDate", () => /* @__PURE__ */ new Date("Invalid Date"));
    __publicField(this, "getTimezone", () => {
      return "default";
    });
    __publicField(this, "setTimezone", (value) => {
      return value;
    });
    __publicField(this, "toJsDate", (value) => {
      return value;
    });
    __publicField(this, "getCurrentLocaleCode", () => {
      return this.locale.code;
    });
    // Note: date-fns input types are more lenient than this adapter, so we need to expose our more
    // strict signature and delegate to the more lenient signature. Otherwise, we have downstream type errors upon usage.
    __publicField(this, "is12HourCycleInCurrentLocale", () => {
      return /a/.test(this.locale.formatLong.time({
        width: "short"
      }));
    });
    __publicField(this, "expandFormat", (format2) => {
      const longFormatRegexp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
      return format2.match(longFormatRegexp).map((token) => {
        const firstCharacter = token[0];
        if (firstCharacter === "p" || firstCharacter === "P") {
          const longFormatter = this.longFormatters[firstCharacter];
          return longFormatter(token, this.locale.formatLong);
        }
        return token;
      }).join("");
    });
    __publicField(this, "formatNumber", (numberToFormat) => {
      return numberToFormat;
    });
    __publicField(this, "getDayOfWeek", (value) => {
      return value.getDay() + 1;
    });
    const {
      locale,
      formats,
      longFormatters: longFormatters2,
      lib
    } = props;
    this.locale = locale;
    this.formats = _extends({}, defaultFormats, formats);
    this.longFormatters = longFormatters2;
    this.lib = lib || "date-fns";
  }
};

// node_modules/@mui/x-date-pickers/esm/AdapterDateFns/AdapterDateFns.js
var AdapterDateFns = class extends AdapterDateFnsBase {
  constructor({
    locale,
    formats
  } = {}) {
    if (true) {
      if (typeof addDays !== "function") {
        throw new Error(["MUI: The `date-fns` package v2.x is not compatible with this adapter.", "Please, install v3.x or v4.x of the package or use the `AdapterDateFnsV2` instead."].join("\n"));
      }
      if (!longFormatters) {
        throw new Error("MUI: The minimum supported `date-fns` package version compatible with this adapter is `3.2.x`.");
      }
    }
    super({
      locale: locale ?? enUS,
      formats,
      longFormatters
    });
    // TODO: explicit return types can be removed once there is only one date-fns version supported
    __publicField(this, "parse", (value, format2) => {
      if (value === "") {
        return null;
      }
      return parse(value, format2, /* @__PURE__ */ new Date(), {
        locale: this.locale
      });
    });
    __publicField(this, "isValid", (value) => {
      if (value == null) {
        return false;
      }
      return isValid(value);
    });
    __publicField(this, "format", (value, formatKey) => {
      return this.formatByString(value, this.formats[formatKey]);
    });
    __publicField(this, "formatByString", (value, formatString) => {
      return format(value, formatString, {
        locale: this.locale
      });
    });
    __publicField(this, "isEqual", (value, comparing) => {
      if (value === null && comparing === null) {
        return true;
      }
      if (value === null || comparing === null) {
        return false;
      }
      return isEqual(value, comparing);
    });
    __publicField(this, "isSameYear", (value, comparing) => {
      return isSameYear(value, comparing);
    });
    __publicField(this, "isSameMonth", (value, comparing) => {
      return isSameMonth(value, comparing);
    });
    __publicField(this, "isSameDay", (value, comparing) => {
      return isSameDay(value, comparing);
    });
    __publicField(this, "isSameHour", (value, comparing) => {
      return isSameHour(value, comparing);
    });
    __publicField(this, "isAfter", (value, comparing) => {
      return isAfter(value, comparing);
    });
    __publicField(this, "isAfterYear", (value, comparing) => {
      return isAfter(value, endOfYear(comparing));
    });
    __publicField(this, "isAfterDay", (value, comparing) => {
      return isAfter(value, endOfDay(comparing));
    });
    __publicField(this, "isBefore", (value, comparing) => {
      return isBefore(value, comparing);
    });
    __publicField(this, "isBeforeYear", (value, comparing) => {
      return isBefore(value, this.startOfYear(comparing));
    });
    __publicField(this, "isBeforeDay", (value, comparing) => {
      return isBefore(value, this.startOfDay(comparing));
    });
    __publicField(this, "isWithinRange", (value, [start, end]) => {
      return isWithinInterval(value, {
        start,
        end
      });
    });
    __publicField(this, "startOfYear", (value) => {
      return startOfYear(value);
    });
    __publicField(this, "startOfMonth", (value) => {
      return startOfMonth(value);
    });
    __publicField(this, "startOfWeek", (value) => {
      return startOfWeek(value, {
        locale: this.locale
      });
    });
    __publicField(this, "startOfDay", (value) => {
      return startOfDay(value);
    });
    __publicField(this, "endOfYear", (value) => {
      return endOfYear(value);
    });
    __publicField(this, "endOfMonth", (value) => {
      return endOfMonth(value);
    });
    __publicField(this, "endOfWeek", (value) => {
      return endOfWeek(value, {
        locale: this.locale
      });
    });
    __publicField(this, "endOfDay", (value) => {
      return endOfDay(value);
    });
    __publicField(this, "addYears", (value, amount) => {
      return addYears(value, amount);
    });
    __publicField(this, "addMonths", (value, amount) => {
      return addMonths(value, amount);
    });
    __publicField(this, "addWeeks", (value, amount) => {
      return addWeeks(value, amount);
    });
    __publicField(this, "addDays", (value, amount) => {
      return addDays(value, amount);
    });
    __publicField(this, "addHours", (value, amount) => {
      return addHours(value, amount);
    });
    __publicField(this, "addMinutes", (value, amount) => {
      return addMinutes(value, amount);
    });
    __publicField(this, "addSeconds", (value, amount) => {
      return addSeconds(value, amount);
    });
    __publicField(this, "getYear", (value) => {
      return getYear(value);
    });
    __publicField(this, "getMonth", (value) => {
      return getMonth(value);
    });
    __publicField(this, "getDate", (value) => {
      return getDate(value);
    });
    __publicField(this, "getHours", (value) => {
      return getHours(value);
    });
    __publicField(this, "getMinutes", (value) => {
      return getMinutes(value);
    });
    __publicField(this, "getSeconds", (value) => {
      return getSeconds(value);
    });
    __publicField(this, "getMilliseconds", (value) => {
      return getMilliseconds(value);
    });
    __publicField(this, "setYear", (value, year) => {
      return setYear(value, year);
    });
    __publicField(this, "setMonth", (value, month) => {
      return setMonth(value, month);
    });
    __publicField(this, "setDate", (value, date) => {
      return setDate(value, date);
    });
    __publicField(this, "setHours", (value, hours) => {
      return setHours(value, hours);
    });
    __publicField(this, "setMinutes", (value, minutes) => {
      return setMinutes(value, minutes);
    });
    __publicField(this, "setSeconds", (value, seconds) => {
      return setSeconds(value, seconds);
    });
    __publicField(this, "setMilliseconds", (value, milliseconds) => {
      return setMilliseconds(value, milliseconds);
    });
    __publicField(this, "getDaysInMonth", (value) => {
      return getDaysInMonth(value);
    });
    __publicField(this, "getWeekArray", (value) => {
      const start = this.startOfWeek(this.startOfMonth(value));
      const end = this.endOfWeek(this.endOfMonth(value));
      let count = 0;
      let current = start;
      const nestedWeeks = [];
      while (this.isBefore(current, end)) {
        const weekNumber = Math.floor(count / 7);
        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
        nestedWeeks[weekNumber].push(current);
        current = this.addDays(current, 1);
        count += 1;
      }
      return nestedWeeks;
    });
    __publicField(this, "getWeekNumber", (value) => {
      return getWeek(value, {
        locale: this.locale
      });
    });
    __publicField(this, "getYearRange", ([start, end]) => {
      const startDate = this.startOfYear(start);
      const endDate = this.endOfYear(end);
      const years = [];
      let current = startDate;
      while (this.isBefore(current, endDate)) {
        years.push(current);
        current = this.addYears(current, 1);
      }
      return years;
    });
  }
};
export {
  AdapterDateFns
};
//# sourceMappingURL=@mui_x-date-pickers_AdapterDateFns.js.map
